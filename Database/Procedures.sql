USE SUNCARE_HOSPITAL;

-- This Procedure Returns The Doctors Name ,Designation given the id
-- DROP PROCEDURE IF EXISTS GET_DOCTOR_NAME;

DELIMITER $$
CREATE PROCEDURE GET_DOCTOR_NAME(IN ID INTEGER)
BEGIN
     SELECT D.DOCTOR_ID AS id,CONCAT(DE.DESIGNATION,' ',DOCTOR_NAME) AS name
     FROM DOCTOR D
     JOIN DOCTOR_DESIGNATION DD ON DD.DOCTOR_ID=D.DOCTOR_ID
     JOIN DESIGNATION DE ON DE.DESIGNATION_ID=DD.DESIGNATION_ID
     WHERE D.DOCTOR_ID=ID;
END$$
DELIMITER ;

CALL GET_DOCTOR_NAME(1);

-- This function returns the full form name of the doctor
DROP FUNCTION IF EXISTS GET_DOCTOR_NAME;

DELIMITER $$
CREATE FUNCTION GET_DOCTOR_NAME(IN_DOCTOR_ID INT)
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE OUT_DOCTOR_NAME VARCHAR(100);

    SELECT CONCAT(DSG.DESIGNATION,' ',D.DOCTOR_NAME) INTO OUT_DOCTOR_NAME
    FROM DOCTOR D
    JOIN DOCTOR_DESIGNATION DD ON D.DOCTOR_ID=DD.DOCTOR_ID AND D.DOCTOR_ID=IN_DOCTOR_ID
    JOIN DESIGNATION DSG ON DSG.DESIGNATION_ID=DD.DESIGNATION_ID;

    RETURN OUT_DOCTOR_NAME;
END $$
DELIMITER ;

CALL GET_DOCTOR_NAME(2);


-- This Procedure Returns All Doctors Name and Id Only
DROP PROCEDURE IF EXISTS GET_ALL_DOCTORS_LIMITED;

DELIMITER $$
CREATE PROCEDURE GET_ALL_DOCTORS_LIMITED()
BEGIN
     SELECT D.DOCTOR_ID AS id,CONCAT(DE.DESIGNATION,' ',DOCTOR_NAME) AS name
     FROM DOCTOR D
     JOIN DOCTOR_DESIGNATION DD ON DD.DOCTOR_ID=D.DOCTOR_ID
     JOIN DESIGNATION DE ON DE.DESIGNATION_ID=DD.DESIGNATION_ID;
END$$
DELIMITER ;

CALL GET_ALL_DOCTORS_LIMITED();


-- This Procedure returns doctor in the given id range (if exists)
DROP PROCEDURE IF EXISTS GET_DOCTORS;

DELIMITER $$
CREATE PROCEDURE GET_DOCTORS(IN from_doc INTEGER,IN doc_cnt INTEGER)
BEGIN
SELECT D.DOCTOR_ID AS id,CONCAT(DE.DESIGNATION,' ',D.DOCTOR_NAME) AS name,D.IMAGE_LINK AS image
FROM DOCTOR D
JOIN DOCTOR_DESIGNATION DD ON D.DOCTOR_ID=DD.DOCTOR_ID
JOIN DESIGNATION DE ON DD.DESIGNATION_ID=DE.DESIGNATION_ID
ORDER BY id
LIMIT doc_cnt OFFSET from_doc;
END$$
DELIMITER ;

CALL GET_DOCTORS(1,20);

--  This Procedure returns the weekdays of the given doctor
DROP PROCEDURE IF EXISTS DOCTOR_WEEK_DAYS;

DELIMITER $$
CREATE PROCEDURE DOCTOR_WEEK_DAYS(IN DOCTOR_ID INTEGER)
BEGIN
SELECT W.WEEK_DAY AS day,TIME_FORMAT(P.FROM,'%h:%i %p') AS start,TIME_FORMAT(P.TO,'%h:%i %p') AS end
FROM PRACTICE_DAYS P
JOIN WEEK_DAYS W ON W.DAY_ID=P.DAY
WHERE P.DOCTOR_ID=DOCTOR_ID;
END$$
DELIMITER ;


CALL DOCTOR_WEEK_DAYS(1);

-- This Procedure returns the qualifications or degrees of the given doctor
DROP PROCEDURE IF EXISTS DOCTOR_DEGREES;

DELIMITER $$
CREATE PROCEDURE DOCTOR_DEGREES(IN DOCTOR_ID INTEGER)
BEGIN
SELECT DE.DEGREE AS degree,S.SUBJECT AS subject,I.NAME AS institute
FROM DOCTOR_DETAILS D
JOIN DEGREE DE ON D.DEGREE_ID=DE.DEGREE_ID
JOIN INSTITUTION I ON I.INSTITUTION_ID=D.INSTITUTION_ID
JOIN SUBJECT S ON S.SUBJECT_ID=D.SUBJECT_ID
WHERE D.DOCTOR_ID=DOCTOR_ID;
END$$
DELIMITER ;

CALL DOCTOR_DEGREES(3);

-- Searching Utility.Assumes that necessary temp table has been created these tables are:s_subject,s_designation,s_degrees and name should be one
DROP PROCEDURE IF EXISTS ADVANCED_SEARCH_DOCTORS;

DELIMITER $$
CREATE PROCEDURE ADVANCED_SEARCH_DOCTORS(IN NAME VARCHAR(50),
                                IN DEGREE_CNT INTEGER,
                                IN SUBJECT_CNT INTEGER,
                                IN DESIG_CNT INTEGER,
                                IN FROM_DOC INTEGER,
                                IN DOC_CNT INTEGER)
BEGIN
WITH DEGREE_FILTER AS(
SELECT DD.DOCTOR_ID
FROM DOCTOR_DETAILS DD
LEFT JOIN SELECTED_DEGREE SD ON SD.ID=DD.DEGREE_ID
WHERE DEGREE_CNT=0 OR SD.ID IS NOT NULL
),
SUBJECT_FILTER AS(
     SELECT DD.DOCTOR_ID
     FROM DOCTOR_DETAILS DD
     LEFT JOIN SELECTED_SUBJECT SS ON SS.ID=DD.SUBJECT_ID
     WHERE SUBJECT_CNT=0 OR SS.ID IS NOT NULL
),
DESIGNATION_FILTER AS(
     SELECT DE.DOCTOR_ID
     FROM DOCTOR_DESIGNATION DE
     LEFT JOIN SELECTED_DESIGNATION SD ON SD.ID=DE.DESIGNATION_ID
     WHERE DESIG_CNT=0 OR SD.ID IS NOT NULL
)SELECT DISTINCT D.DOCTOR_ID AS id,CONCAT(DES.DESIGNATION,' ',D.DOCTOR_NAME) AS name,D.IMAGE_LINK AS image
FROM DOCTOR D
JOIN DEGREE_FILTER DE ON DE.DOCTOR_ID=D.DOCTOR_ID
JOIN SUBJECT_FILTER S ON S.DOCTOR_ID=D.DOCTOR_ID
JOIN DESIGNATION_FILTER DS ON DS.DOCTOR_ID=D.DOCTOR_ID
JOIN DOCTOR_DESIGNATION DD ON DD.DOCTOR_ID=D.DOCTOR_ID
JOIN DESIGNATION DES ON DES.DESIGNATION_ID=DD.DESIGNATION_ID
WHERE UPPER(D.DOCTOR_NAME) LIKE CONCAT('%',UPPER(NAME),'%') OR NAME IS NULL
ORDER BY id
LIMIT DOC_CNT OFFSET FROM_DOC;
END$$

DELIMITER ;

CALL ADVANCED_SEARCH_DOCTORS(NULL,2,2,2,0,20);


-- Search  when none criteria is slected more than once
DROP PROCEDURE IF EXISTS ONE_PARAM_ADVANCED_SEARCH;

DELIMITER $$
CREATE PROCEDURE ONE_PARAM_ADVANCED_SEARCH(IN NAME VARCHAR(50),
                                           IN DEGREE_ID INTEGER,
										   IN DESIGNATION_ID INTEGER,
                                           IN SUBJECT_ID INTEGER,
                                           IN FROM_DOC INTEGER,
                                           IN DOC_CNT INTEGER)
BEGIN
     SELECT DISTINCT D.DOCTOR_ID AS id,CONCAT(DES.DESIGNATION,' ',D.DOCTOR_NAME) AS name,D.IMAGE_LINK AS image
     FROM DOCTOR D
     JOIN DOCTOR_DETAILS DD ON DD.DOCTOR_ID=D.DOCTOR_ID 
     AND ((DEGREE_ID IS NULL OR DEGREE_ID=DD.DEGREE_ID) AND (SUBJECT_ID IS NULL OR SUBJECT_ID=DD.SUBJECT_ID))
     JOIN DOCTOR_DESIGNATION DGN ON DGN.DOCTOR_ID=D.DOCTOR_ID
     JOIN DESIGNATION DES ON DES.DESIGNATION_ID=DGN.DESIGNATION_ID
     WHERE (DESIGNATION_ID IS NULL OR DGN.DESIGNATION_ID=DESIGNATION_ID)
     AND (NAME IS NULL OR (UPPER(D.DOCTOR_NAME) LIKE CONCAT('%',UPPER(NAME),'%')))
     ORDER BY id
     LIMIT DOC_CNT OFFSET FROM_DOC;
END$$

DELIMITER ;

CALL ONE_PARAM_ADVANCED_SEARCH(NULL,NULL,null,3,0,5);

-- This procedure returns the count of doctor rather than the doctors id

DROP PROCEDURE IF EXISTS ONE_PARAM_ADVANCED_SEARCH_CNT;

DELIMITER $$
CREATE PROCEDURE ONE_PARAM_ADVANCED_SEARCH_CNT(IN NAME VARCHAR(50),
                                           IN DEGREE_ID INTEGER,
										   IN DESIGNATION_ID INTEGER,
                                           IN SUBJECT_ID INTEGER,
                                           IN FROM_DOC INTEGER,
                                           IN DOC_CNT INTEGER)
BEGIN
     SELECT COUNT(DISTINCT D.DOCTOR_ID) AS total_count
     FROM DOCTOR D
     JOIN DOCTOR_DETAILS DD ON DD.DOCTOR_ID=D.DOCTOR_ID 
     AND ((DEGREE_ID IS NULL OR DEGREE_ID=DD.DEGREE_ID) AND (SUBJECT_ID IS NULL OR SUBJECT_ID=DD.SUBJECT_ID))
     JOIN DOCTOR_DESIGNATION DGN ON DGN.DOCTOR_ID=D.DOCTOR_ID
     JOIN DESIGNATION DES ON DES.DESIGNATION_ID=DGN.DESIGNATION_ID
     WHERE (DESIGNATION_ID IS NULL OR DGN.DESIGNATION_ID=DESIGNATION_ID)
     AND (NAME IS NULL OR (UPPER(D.DOCTOR_NAME) LIKE CONCAT('%',UPPER(NAME),'%')));
END$$

DELIMITER ;

-- Get The doctos next seven schedule date and time
DROP PROCEDURE IF EXISTS GET_NEXT_SEVEN_SCHEDULE_DATE;

DELIMITER $$
CREATE PROCEDURE GET_NEXT_SEVEN_SCHEDULE_DATE(IN DOCTOR_ID INTEGER)
BEGIN
     DECLARE I_DATE DATE;
     DECLARE L_DATE DATE;
     DECLARE SCHEDULE_CNT INT DEFAULT 1;
     SET L_DATE=CURRENT_DATE()+INTERVAL 7 DAY;
     SET I_DATE=CURRENT_DATE()+INTERVAL 1 DAY;
     DROP TEMPORARY TABLE IF EXISTS SCHEDULE_TABLE;
     CREATE TEMPORARY TABLE SCHEDULE_TABLE(WEEK_DAY INT NOT NULL,SCHEDULE_DATE DATE NOT NULL);
     
     WHILE I_DATE<=L_DATE DO
          SELECT COUNT(*) INTO SCHEDULE_CNT
          FROM PRACTICE_DAYS PD
          WHERE PD.DOCTOR_ID=DOCTOR_ID
          AND (((WEEKDAY(I_DATE)+2)%7)+1)=PD.DAY;
          
          IF SCHEDULE_CNT>0 THEN
               INSERT INTO SCHEDULE_TABLE (WEEK_DAY,SCHEDULE_DATE) VALUES (((WEEKDAY(I_DATE)+2)%7)+1,I_DATE);
		  END IF;
          
          SET I_DATE=I_DATE+INTERVAL 1 DAY;
	 END WHILE;
     
     
     WITH Q AS(
		 SELECT DISTINCT WEEK_DAY,SCHEDULE_DATE
		 FROM SCHEDULE_TABLE
     )
     SELECT Q.WEEK_DAY AS week_day,DATE_FORMAT(Q.SCHEDULE_DATE,'%W %e %M') AS schedule_date
     FROM Q 
     ORDER BY Q.SCHEDULE_DATE ASC;
     
     DROP TEMPORARY TABLE SCHEDULE_TABLE;
END$$
DELIMITER ;

CALL GET_NEXT_SEVEN_SCHEDULE_DATE(30);

-- This gives the time of a certain schedule date given the doctor id and schedule date

DROP PROCEDURE IF EXISTS GET_TIME_SCHEDULE;

DELIMITER $$
CREATE PROCEDURE GET_TIME_SCHEDULE(IN DOCTOR_ID INTEGER,
                                   IN WEEK_DAY INTEGER)
BEGIN
     SELECT TIME_FORMAT(P.FROM,'%h:%i %p') AS start,TIME_FORMAT(P.TO,'%h:%i %p') AS end
     FROM PRACTICE_DAYS P
     WHERE P.DOCTOR_ID=DOCTOR_ID AND P.DAY=WEEK_DAY;
END$$
DELIMITER ;

CALL GET_TIME_SCHEDULE(30,2);

-- This Procedures Creates An Appointment Given The Necessary Parameters 
-- Having a Trigger in the Appointment Tbale if the patient doesn't eixsts then a new patient is entered in patients table

DROP PROCEDURE IF EXISTS BOOK_APPOINTMENT;

DELIMITER $$
CREATE PROCEDURE BOOK_APPOINTMENT(IN PATIENT_ID INTEGER,
                                  IN DOCTOR_ID INTEGER,
                                  IN APPT_DATE VARCHAR(50),
                                  IN START_TIME VARCHAR(50),
                                  IN END_TIME VARCHAR(50)
                                  )
BEGIN
     DECLARE APPOINTMENT_DATE DATE;
     SET APPOINTMENT_DATE= STR_TO_DATE(CONCAT(APPT_DATE,' ',YEAR(CURRENT_DATE())),'%W %e %M %Y');
     
     -- When appointment is booked it is in pending state and it's status_id is 1
     INSERT INTO APPOINTMENT (PATIENT_ID,DOCTOR_ID,DATE,START_TIME,END_TIME,STATUS_ID)
     VALUES(PATIENT_ID,DOCTOR_ID,
     APPOINTMENT_DATE,
     STR_TO_DATE(START_TIME,'%h:%i %p'),
     STR_TO_DATE(END_TIME,'%h:%i %p'),1);
END$$
DELIMITER ;

CALL BOOK_APPOINTMENT(NULL,'Rubayat','2003-05-22','1','01717363482','2','Thursday 12 June','09:30 am');


-- This procedure Creates an patient along with user in database
DROP PROCEDURE IF EXISTS CREATE_PATIENT_WITH_USER;
    
DELIMITER $$

CREATE PROCEDURE CREATE_PATIENT_WITH_USER(
  IN NAME VARCHAR(45),
  IN GENDER INTEGER,
  IN B_YEAR INTEGER,
  IN B_MONTH INTEGER,
  IN B_DAY INTEGER,
  IN IN_USERNAME VARCHAR(45),
  IN PASSWORD_HASH VARCHAR(60),
  IN ADDRESS VARCHAR(45),
  IN EMAIL VARCHAR(45),
  IN PHONE VARCHAR(45)
)
BEGIN
  DECLARE ALREADY_EXISTS INT DEFAULT 0;
  DECLARE USER_ID INT;

  -- Check if username already exists
  SELECT COUNT(*) INTO ALREADY_EXISTS
  FROM `USER` U WHERE U.USERNAME = IN_USERNAME;

  IF ALREADY_EXISTS > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'USERNAME ALREADY EXISTS',
          MYSQL_ERRNO = 1001;
  END IF;

  -- Insert user
  INSERT INTO `USER` (USERNAME, PASSWORD_HASH)
  VALUES (IN_USERNAME, PASSWORD_HASH);

  SELECT LAST_INSERT_ID() INTO USER_ID;

  -- Insert patient
  INSERT INTO PATIENT (
    PATIENT_NAME, GENDER, DATE_OF_BIRTH, ADDRESS, PHONE, EMAIL, USER_ID
  )
  VALUES (
    NAME, GENDER,
    STR_TO_DATE(CONCAT(B_YEAR, '-', B_MONTH, '-', B_DAY), '%Y-%c-%e'),
    ADDRESS, PHONE, EMAIL, USER_ID
  );
END $$

DELIMITER ;

-- This Procedures gives the user data when requested with username
DROP PROCEDURE IF EXISTS GET_USER_DATA;

DELIMITER $$
CREATE PROCEDURE GET_USER_DATA(IN IN_USERNAME VARCHAR(45))
BEGIN
     SELECT u.user_id,u.username,p.patient_id,p.patient_name
     FROM USER u
     JOIN PATIENT p ON u.USER_ID=p.USER_ID
     WHERE u.USERNAME=IN_USERNAME;
END $$
DELIMITER ;

CALL GET_USER_DATA('rubay');

-- This procedures returns the appointment info a patient
DROP PROCEDURE IF EXISTS GET_APPOINTMENT_INFO;

DELIMITER $$
CREATE PROCEDURE GET_APPOINTMENT_INFO(IN IN_PATIENT_ID INTEGER)
BEGIN
    SELECT a.appointment_id as id,p.patient_name,d.DOCTOR_ID as doctor_id,GET_DOCTOR_NAME(d.DOCTOR_ID) AS doctor_name,DATE_FORMAT(a.DATE,'%d %M %Y') AS 'date',
           CONCAT(DATE_FORMAT(a.start_time,'%h:%m %p'),'-',DATE_FORMAT(a.end_time,'%h:%m %p')) as 'time',
           ap.status
	FROM APPOINTMENT a
	JOIN PATIENT p ON p.PATIENT_ID=a.PATIENT_ID AND p.PATIENT_ID=IN_PATIENT_ID
    JOIN DOCTOR d ON a.DOCTOR_ID=d.DOCTOR_ID
    JOIN APPOINTMENT_STATUS ap ON ap.STATUS_ID=a.STATUS_ID
	ORDER BY a.DATE DESC;
END$$
DELIMITER ;

CALL GET_APPOINTMENT_INFO(1);

-- This procedure updates the appointment given the appointment_id 
DROP PROCEDURE IF EXISTS UPDATE_APPOINTMENT;

DELIMITER $$
CREATE PROCEDURE UPDATE_APPOINTMENT(IN IN_APPOINTMENT_ID INTEGER,
									IN APPT_DATE VARCHAR(50),
                                    IN IN_START_TIME VARCHAR(50),
                                    IN IN_END_TIME VARCHAR(50)
                                    )
BEGIN
    UPDATE APPOINTMENT
    SET DATE= STR_TO_DATE(CONCAT(APPT_DATE,' ',YEAR(CURRENT_DATE())),'%W %e %M %Y'),
    START_TIME=STR_TO_DATE(IN_START_TIME,'%h:%i %p'),
    END_TIME=STR_TO_DATE(IN_END_TIME,'%h:%i %p')
    WHERE APPOINTMENT_ID=IN_APPOINTMENT_ID;
END $$
DELIMITER ;

-- This procedure cancels an appointment
DROP PROCEDURE IF EXISTS CANCEL_APPOINTMENT;

DELIMITER $$
CREATE PROCEDURE CANCEL_APPOINTMENT(IN IN_APPOINTMENT_ID INTEGER)
BEGIN
   UPDATE APPOINTMENT
   SET STATUS_ID=2
   WHERE APPOINTMENT_ID=IN_APPOINTMENT_ID;
END $$
DELIMITER ;

-- this procedure returns all service name
DROP PROCEDURE IF EXISTS GET_ALL_SERVICES;

DELIMITER $$
CREATE PROCEDURE GET_ALL_SERVICES()
BEGIN
    SELECT TEST_ID AS id,TEST_NAME AS name,PRICE AS price
    FROM LABORATORY_TEST;
END$$
DELIMITER ;

CALL GET_ALL_SERVICES();


-- this procedure returns a certain patients all prescription overview given the patient id
DROP PROCEDURE IF EXISTS GET_ALL_PRESCRIPTIONS;

DELIMITER $$
CREATE PROCEDURE GET_ALL_PRESCRIPTIONS(IN IN_PATIENT_ID INTEGER)
BEGIN
     SELECT P.PRESCRIPTION_ID AS id,D.DOCTOR_NAME AS doctor,DATE_FORMAT(A.DATE, '%b %d %Y') AS date
     FROM PRESCRIPTION P
     JOIN APPOINTMENT A ON A.APPOINTMENT_ID=P.APPOINTMENT_ID
     JOIN DOCTOR D ON D.DOCTOR_ID=A.DOCTOR_ID
     WHERE A.PATIENT_ID=IN_PATIENT_ID;
END$$
DELIMITER ;

CALL GET_ALL_PRESCRIPTIONS(1);

-- THIS PROCEDURE RETURNS ALL REPORTS OVERVIEW OF A PTIENT GIVEN THE PATIENT ID
DROP PROCEDURE IF EXISTS GET_ALL_REPORTS;

DELIMITER $$
CREATE PROCEDURE GET_ALL_REPORTS(IN IN_PATIENT_ID INTEGER)
BEGIN

END$$
DELIMITER ;


-- This procedure adds review given patient id rating and comment
DROP PROCEDURE IF EXISTS ADD_REVIEW;

DELIMITER $$		
CREATE PROCEDURE ADD_REVIEW(IN IN_USER_ID INTEGER,
                            IN IN_COMMENT VARCHAR(500),
							IN IN_STAR INTEGER)
BEGIN
     DECLARE V_COMMENTED INT;
     SET V_COMMENTED=0;
     
     SELECT COUNT(USER_ID) INTO V_COMMENTED
     FROM HOSPITAL_REVIEW
     WHERE USER_ID=IN_USER_ID;
     
     
     IF V_COMMENTED>0 THEN
       UPDATE HOSPITAL_REVIEW
       SET COMMENT=IN_COMMENT,STAR=IN_STAR
       WHERE USER_ID=IN_USER_ID;
    ELSE
		INSERT INTO HOSPITAL_REVIEW (USER_ID,COMMENT,STAR)
		VALUES(IN_USER_ID,IN_COMMENT,IN_STAR);
	END IF;
END $$
DELIMITER ;

-- this procedure returns random 20 reviews along with the user's comment (if called with user id) for view in homepgae
DROP PROCEDURE IF EXISTS GET_RANDOM_REVIEWS;

DELIMITER $$
CREATE PROCEDURE GET_RANDOM_REVIEWS(IN IN_USER_ID INTEGER)
BEGIN
    DECLARE LOW_RNG INTEGER;
    DECLARE HIGH_RNG INTEGER;
    DECLARE I INT DEFAULT 1;
    DECLARE RND INT;
    
    CREATE TEMPORARY TABLE IF NOT EXISTS RANDOM_NUMBER(
         RND_ID INTEGER
    );
    
    SELECT MIN(USER_ID) INTO LOW_RNG
    FROM HOSPITAL_REVIEW;
    
    SELECT MAX(USER_ID) INTO HIGH_RNG
    FROM HOSPITAL_REVIEW;
    
    WHILE I<=40 DO
        SET RND=FLOOR(LOW_RNG+(RAND()*(HIGH_RNG-LOW_RNG)));
        INSERT INTO RANDOM_NUMBER (RND_ID)
        VALUES(RND);
        SET I=I+1;
	END WHILE;
    
    SELECT Q.* 
    FROM (
            SELECT P.USER_ID AS user_id,P.PATIENT_NAME AS name,H.COMMENT AS comment,H.STAR AS rating
			FROM HOSPITAL_REVIEW H
			JOIN PATIENT P ON P.USER_ID=H.USER_ID
			WHERE P.USER_ID=IN_USER_ID
			UNION
			SELECT P.USER_ID AS user_id,P.PATIENT_NAME AS name,H.COMMENT AS comment,H.STAR AS rating
			FROM HOSPITAL_REVIEW H
			JOIN PATIENT P ON P.USER_ID=H.USER_ID
			WHERE P.USER_ID IN(
                  SELECT DISTINCT RND_ID
                  FROM RANDOM_NUMBER
            )
	 ) AS Q
	 LIMIT 20;
     
     DROP TEMPORARY TABLE IF EXISTS RANDOM_NUMBER;
END$$
DELIMITER ;

CALL GET_RANDOM_REVIEWS(NULL);

-- this procedure returns the prescription given the prescription id

DROP PROCEDURE IF EXISTS GET_THE_PRESCRIPTION;

DELIMITER $$
CREATE PROCEDURE GET_THE_PRESCRIPTION(IN IN_PRESCRIPTION_ID INTEGER)
BEGIN
    SELECT P.PRESCRIPTION_ID AS id,A.DOCTOR_ID AS doctor_id,A.PATIENT_ID AS patient_id,DATE_FORMAT(A.DATE,'%d %M %Y') AS date,P.WEIGHT AS weight,P.BLOOD_PRESSURE AS bp,P.PREVIOUS_HISTORY AS history
    FROM PRESCRIPTION P
    JOIN APPOINTMENT A ON A.APPOINTMENT_ID=P.APPOINTMENT_ID
    WHERE P.PRESCRIPTION_ID=IN_PRESCRIPTION_ID;
END $$
DELIMITER ;

CALL GET_THE_PRESCRIPTION(1);

-- Procedure to get patient details

DROP PROCEDURE IF EXISTS GET_PATIENT_DETAILS;

DELIMITER $$
CREATE PROCEDURE GET_PATIENT_DETAILS(IN IN_PATIENT_ID INTEGER)
BEGIN
    SELECT P.PATIENT_NAME AS name,ROUND(DATEDIFF(CURRENT_DATE,P.DATE_OF_BIRTH)/365.25) AS age,G.GENDER_NAME AS gender,
           P.ADDRESS AS address
	FROM PATIENT P
    JOIN GENDER G ON P.GENDER=G.ID
    WHERE P.PATIENT_ID=IN_PATIENT_ID;
END $$
DELIMITER ;

CALL GET_PATIENT_DETAILS(1);

-- This procedure returns the prescribed medicine given the prescription id
DROP PROCEDURE IF EXISTS GET_PRESCRIBED_MEDICINE;

DELIMITER $$
CREATE PROCEDURE GET_PRESCRIBED_MEDICINE(IN IN_PRESCRIPTION_ID INTEGER)
BEGIN
    SELECT M.MEDICINE_NAME AS name,CONCAT(PM.MORNING,'-',PM.NOON,'-',PM.NIGHT) AS distribution,
           CONCAT(PM.DURATION,' days') AS duration
	FROM PRESCRIBED_MEDICINE PM
    JOIN MEDICINE M ON M.MEDICINE_ID=PM.MEDICINE_ID
    WHERE PM.PRESCRIPTION_ID=IN_PRESCRIPTION_ID;
END $$
DELIMITER ;

CALL GET_PRESCRIBED_MEDICINE(1);

-- THIS PROCEDURE RETURNS PRESCRIBED TESTS GIVEN PRESCRIPTION ID
DROP PROCEDURE IF EXISTS GET_PRESCRIBED_TESTS;

DELIMITER $$
CREATE PROCEDURE GET_PRESCRIBED_TESTS(IN IN_PRESCRIPTION_ID INTEGER)
BEGIN
    SELECT LT.TEST_NAME AS name
	FROM PRESCRIBED_TEST PT
    JOIN LABORATORY_TEST LT ON PT.TEST_ID=LT.TEST_ID
    WHERE PT.PRESCRIPTION_ID=IN_PRESCRIPTION_ID;
END $$
DELIMITER ;

CALL GET_PRESCRIBED_TESTS(1);

-- This procedure updates the image link of a user and returns the previous deletelink if  exists
DROP PROCEDURE IF EXISTS UPDATE_IMAGE_LINK;

DELIMITER $$
CREATE PROCEDURE UPDATE_IMAGE_LINK(IN IN_PATIENT_ID INTEGER,
								   IN NEW_IMAGE_LINK VARCHAR(100),
                                   IN NEW_DELETE_LINK VARCHAR(100),
                                   OUT PREV_DELETE_LINK VARCHAR(100)
                                   )
BEGIN
    SELECT DELETE_LINK INTO PREV_DELETE_LINK
    FROM PATIENT
    WHERE PATIENT_ID=IN_PATIENT_ID;
    
    UPDATE PATIENT
    SET IMAGE_LINK=NEW_IMAGE_LINK,
    DELETE_LINK=NEW_DELETE_LINK
    WHERE PATIENT_ID=IN_PATIENT_ID;
END $$
DELIMITER ;


SET @PREVDELETE='';

CALL UPDATE_IMAGE_LINK(1,'hI','bYE',@PREVDELETE);

SELECT @PREVDELETE AS PREVIOUS_LINK;

-- This procedure returns the profile details given the patient_id
DROP PROCEDURE IF EXISTS GET_PROFILE_DETAILS;

DELIMITER $$
CREATE PROCEDURE GET_PROFILE_DETAILS(IN IN_PATIENT_ID INTEGER)
BEGIN
    SELECT patient_id,patient_name,DATE_FORMAT(DATE_OF_BIRTH,'%b %d %Y') AS dateOfBirth,phone,email,address,IMAGE_LINK as profilePhoto
    FROM PATIENT
    WHERE PATIENT_ID=IN_PATIENT_ID;
END $$
DELIMITER ;
    
CALL GET_PROFILE_DETAILS(1);

-- This procedure returns report status and test given the patient_id

DROP PROCEDURE IF EXISTS GET_TEST_REPORTS;

DELIMITER $$
CREATE PROCEDURE GET_TEST_REPORTS(IN IN_PATIENT_ID INTEGER)
BEGIN
     SELECT PT.PRESCRIBED_TEST_ID AS id,LT.TEST_NAME AS name,TS.STATUS AS status,DATE_FORMAT(PT.TEST_DATE,'%d %M %Y') AS date
     FROM PATIENT_TEST PT
     JOIN PRESCRIBED_TEST PST ON PT.PRESCRIBED_TEST_ID=PST.PRESCRIBED_TEST_ID
     JOIN PRESCRIPTION P ON P.PRESCRIPTION_ID=PST.PRESCRIPTION_ID
     JOIN LABORATORY_TEST LT ON LT.TEST_ID=PST.TEST_ID
     JOIN TEST_STATUS TS ON TS.STATUS_ID=PT.STATUS_ID
     JOIN APPOINTMENT A ON A.APPOINTMENT_ID=P.APPOINTMENT_ID
     WHERE A.PATIENT_ID=IN_PATIENT_ID;
END $$
DELIMITER ;

CALL GET_TEST_REPORTS(1);
