-- This trigger prevents unecessary appointments
DROP TRIGGER IF EXISTS CHECK_APPOINTMENT;

DELIMITER $$
CREATE TRIGGER CHECK_APPOINTMENT
BEFORE INSERT 
ON APPOINTMENT
FOR EACH ROW
BEGIN
    DECLARE V_APPT_EXISTS INTEGER;
    DECLARE V_APPT_COUNT INTEGER;
    SET V_APPT_COUNT=0;
    SET V_APPT_EXISTS=0;
    
    SELECT COUNT(A.APPOINTMENT_ID) INTO V_APPT_EXISTS
    FROM APPOINTMENT A
    WHERE A.PATIENT_ID=NEW.PATIENT_ID
    AND A.DOCTOR_ID=NEW.DOCTOR_ID
    AND A.STATUS_ID=1
    AND A.DATE=NEW.DATE;
    
    SELECT COUNT(A.APPOINTMENT_ID) INTO V_APPT_COUNT
    FROM APPOINTMENT A
    WHERE A.PATIENT_ID=NEW.PATIENT_ID
    AND A.STATUS_ID=1;
    
    IF V_APPT_EXISTS>0 THEN
       SIGNAL SQLSTATE '45000'
       SET MESSAGE_TEXT='Already have an appointment!';
	END IF;
    
    IF V_APPT_COUNT>=3 THEN
       SIGNAL SQLSTATE '45000'
       SET MESSAGE_TEXT='Already have three active appointments!';
	END IF;
END$$
DELIMITER ;


-- This Event Cleans up the blocked refresh token every day (those token which is already invalidated by expiration)
-- the event clears up token if 7day has passed since revocation
DROP EVENT IF EXISTS REFRESH_TOKEN_CLEANUP;

CREATE EVENT IF NOT EXISTS REFRESH_TOKEN_CLEANUP
ON SCHEDULE EVERY 1 DAY
STARTS TIMESTAMP(CURRENT_DATE)+INTERVAL 1 DAY
DO
DELETE
FROM BLOCKED_REFRESH_TOKEN
WHERE TIMESTAMPDIFF(DAY, REVOCATION_TIME, CURRENT_TIMESTAMP) >= 7;


-- This event checks if the date and time of an appoinbtment has passed.If so then this chages the status to cnceled of those 
-- appointment which is still pending
DROP EVENT IF EXISTS APPOINTMENT_CLEANUP;

CREATE EVENT IF NOT EXISTS APPOINTMENT_CLEANUP
ON SCHEDULE EVERY 1 HOUR
STARTS TIMESTAMP(CURRENT_DATE)+INTERVAL 1 HOUR
DO
-- STATUS ID OF CANCELED IS 2 AND OF PENDING IS 1
UPDATE APPOINTMENT A
SET A.STATUS_ID=2
WHERE CURRENT_DATE()>=A.DATE
AND CURRENT_TIME()>=A.END_TIME
AND A.STATUS_ID=1;
